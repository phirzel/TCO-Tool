package ch.softenvironment.jomm.demoapp.model;
/*
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

import ch.softenvironment.jomm.descriptor.DbDescriptor;
import ch.softenvironment.jomm.descriptor.DbMultiplicityRange;
import ch.softenvironment.jomm.descriptor.DbNumericFieldDescriptor;
import ch.softenvironment.jomm.descriptor.DbTextFieldDescriptor;
import ch.softenvironment.jomm.mvc.model.DbEntityBean;

/**
 * @author generated by the umleditor
 * @version $Revision: 1.3 $ $Date: 2006-07-05 16:35:34 $
 */
public class Activity extends DbEntityBean {

    protected Activity(ch.softenvironment.jomm.DbObjectServer objectServer) {
        super(objectServer);
    }

    private ch.softenvironment.jomm.demoapp.model.Phase fieldPhase;

    public ch.softenvironment.jomm.demoapp.model.Phase getPhase() {
        refresh(false); // read lazy initialized objects
        return fieldPhase;
    }

    public void setPhase(ch.softenvironment.jomm.demoapp.model.Phase phase) {
        ch.softenvironment.jomm.demoapp.model.Phase oldValue = fieldPhase;
        fieldPhase = phase;
        firePropertyChange("phase", oldValue, fieldPhase);
    }

    private String fieldDescription;

    public String getDescription() {
        refresh(false); // read lazy initialized objects
        return fieldDescription;
    }

    public void setDescription(String description) {
        String oldValue = fieldDescription;
        fieldDescription = description;
        firePropertyChange("description", oldValue, fieldDescription);
    }

    private java.lang.Double fieldEffort;

    public java.lang.Double getEffort() {
        refresh(false); // read lazy initialized objects
        return fieldEffort;
    }

    public void setEffort(java.lang.Double effort) {
        java.lang.Double oldValue = fieldEffort;
        fieldEffort = effort;
        firePropertyChange("effort", oldValue, fieldEffort);
    }

    private java.lang.Long fieldWorkProductId;

    public java.lang.Long getWorkProductId() {
        refresh(false); // read lazy initialized objects
        return fieldWorkProductId;
    }

    public void setWorkProductId(java.lang.Long workProduct) {
        java.lang.Long oldValue = fieldWorkProductId;
        fieldWorkProductId = workProduct;
        firePropertyChange("workProductId", oldValue, fieldWorkProductId);
    }

    private java.lang.Long fieldProjectId;

    public java.lang.Long getProjectId() {
        refresh(false); // read lazy initialized objects
        return fieldProjectId;
    }

    public void setProjectId(java.lang.Long project) {
        java.lang.Long oldValue = fieldProjectId;
        fieldProjectId = project;
        firePropertyChange("projectId", oldValue, fieldProjectId);
    }

    private java.lang.Long fieldRoleId;

    public java.lang.Long getRoleId() {
        refresh(false); // read lazy initialized objects
        return fieldRoleId;
    }

    public void setRoleId(java.lang.Long role) {
        java.lang.Long oldValue = fieldRoleId;
        fieldRoleId = role;
        firePropertyChange("roleId", oldValue, fieldRoleId);
    }

    public static DbDescriptor createDescriptor() {
        DbDescriptor descriptor = new DbDescriptor(Activity.class);
        descriptor.addCode("phase", "Phase", new DbMultiplicityRange(0, 1));
        descriptor.add("description", "Description", new DbTextFieldDescriptor(1024), new DbMultiplicityRange(0, 1));
        descriptor.add("effort", "Effort", new DbNumericFieldDescriptor(java.lang.Double.class, 0.0, 86400.0, 2), new DbMultiplicityRange(0, 1));
        descriptor.addManyToOneReferenceId(DbDescriptor.ASSOCIATION, "workProductId", "T_Id_workProduct", new DbMultiplicityRange(1, 1));
        descriptor.addManyToOneReferenceId(DbDescriptor.ASSOCIATION, "projectId", "T_Id_Project", new DbMultiplicityRange(1, 1));
        descriptor.addManyToOneReferenceId(DbDescriptor.ASSOCIATION, "roleId", "T_Id_role", new DbMultiplicityRange(1, 1));
        return descriptor;
    }

    @Override
    public Object jdoGetVersion() {
        //TODO HIP just added to compile
        return null;
    }

    @Override
    public boolean jdoIsDetached() {
        //TODO HIP just added to compile
        return false;
    }

    @Override
    public Object jdoNewObjectIdInstance(Object o) {
        //TODO HIP just added to compile
        return null;
    }
}
