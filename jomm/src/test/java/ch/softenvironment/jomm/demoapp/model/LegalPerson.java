package ch.softenvironment.jomm.demoapp.model;
/*
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

import ch.softenvironment.jomm.descriptor.DbDescriptor;
import ch.softenvironment.jomm.descriptor.DbMultiplicityRange;
import ch.softenvironment.jomm.descriptor.DbTextFieldDescriptor;
import java.util.Date;

/**
 * @author generated by the umleditor
 * @version $Revision: 1.3 $ $Date: 2006-07-05 16:35:34 $
 */
public class LegalPerson extends Person {

    protected LegalPerson(ch.softenvironment.jomm.DbObjectServer objectServer) {
        super(objectServer);
    }

    private ch.softenvironment.jomm.demoapp.model.CompanyType fieldCompanyType;

    public ch.softenvironment.jomm.demoapp.model.CompanyType getCompanyType() {
        refresh(false); // read lazy initialized objects
        return fieldCompanyType;
    }

    public void setCompanyType(ch.softenvironment.jomm.demoapp.model.CompanyType companyType) {
        ch.softenvironment.jomm.demoapp.model.CompanyType oldValue = fieldCompanyType;
        fieldCompanyType = companyType;
        firePropertyChange("companyType", oldValue, fieldCompanyType);
    }

    private Date fieldFormation;

    public Date getFormation() {
        refresh(false); // read lazy initialized objects
        return fieldFormation;
    }

    public void setFormation(Date formation) {
        Date oldValue = fieldFormation;
        fieldFormation = formation;
        firePropertyChange("formation", oldValue, fieldFormation);
    }

    public static DbDescriptor createDescriptor() {
        DbDescriptor descriptor = new DbDescriptor(LegalPerson.class);
        descriptor.addCode("companyType", "T_Id_CompanyType", new DbMultiplicityRange(0, 1));
        descriptor.add("formation", "Formation", new DbTextFieldDescriptor(20), new DbMultiplicityRange(0, 1));
        return descriptor;
    }
}
