package ch.softenvironment.jomm.demoapp.model;

/*
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

import ch.softenvironment.jomm.descriptor.DbDateFieldDescriptor;
import ch.softenvironment.jomm.descriptor.DbDescriptor;
import ch.softenvironment.jomm.descriptor.DbFieldTypeDescriptor;
import ch.softenvironment.jomm.descriptor.DbMultiplicityRange;
import ch.softenvironment.jomm.descriptor.DbTextFieldDescriptor;
import ch.softenvironment.jomm.mvc.model.DbEntityBean;

/**
 * @author generated by the umleditor
 */
public class Project extends DbEntityBean {

    protected Project(ch.softenvironment.jomm.DbObjectServer objectServer) {
        super(objectServer);
    }

    private String fieldName;

    public String getName() {
        refresh(false); // read lazy initialized objects
        return fieldName;
    }

    public void setName(String name) {
        String oldValue = fieldName;
        fieldName = name;
        firePropertyChange("name", oldValue, fieldName);
    }

    private Boolean fieldActive;

    public Boolean getActive() {
        refresh(false); // read lazy initialized objects
        return fieldActive;
    }

    public void setActive(Boolean active) {
        Boolean oldValue = fieldActive;
        fieldActive = active;
        firePropertyChange("active", oldValue, fieldActive);
    }

    private java.util.Date fieldStart;

    public java.util.Date getStart() {
        refresh(false); // read lazy initialized objects
        return fieldStart;
    }

    public void setStart(java.util.Date start) {
        java.util.Date oldValue = fieldStart;
        fieldStart = start;
        firePropertyChange("start", oldValue, fieldStart);
    }

    private java.util.List<Activity> fieldTask = new java.util.ArrayList<Activity>();

    public java.util.List<Activity> getTask() {
        refresh(false); // read lazy initialized objects
        return fieldTask;
    }

    public void setTask(java.util.List<Activity> task) {
        java.util.List<Activity> oldValue = fieldTask;
        fieldTask = task;
        firePropertyChange("task", oldValue, fieldTask);
    }

    private java.util.List<Long> fieldMemberId = new java.util.ArrayList<Long>();

    public java.util.List<Long> getMemberId() {
        refresh(false); // read lazy initialized objects
        return fieldMemberId;
    }

    public void setMemberId(java.util.List<Long> member) {
        java.util.List<Long> oldValue = fieldMemberId;
        fieldMemberId = member;
        firePropertyChange("memberId", oldValue, fieldMemberId);
    }

    public static DbDescriptor createDescriptor() {
        DbDescriptor descriptor = new DbDescriptor(Project.class);
        descriptor.add("name", "name", new DbTextFieldDescriptor(255),
            new DbMultiplicityRange(1, 1));
        descriptor.add("active", "active", new DbFieldTypeDescriptor(
            Boolean.class), new DbMultiplicityRange(0, 1));
        descriptor.add("start", "start", new DbDateFieldDescriptor(
            DbDateFieldDescriptor.DATE), new DbMultiplicityRange(0, 1));
        descriptor.addOneToMany(DbDescriptor.COMPOSITION, "task", "projectId",
            new DbMultiplicityRange(0, DbMultiplicityRange.UNBOUND),
            Activity.class, false);
        descriptor.addAssociationAttributed(DbDescriptor.ASSOCIATION,
            "memberId", new DbMultiplicityRange(0,
                DbMultiplicityRange.UNBOUND), new DbMultiplicityRange(
                0, DbMultiplicityRange.UNBOUND), Role.class,
            "projectId");
        return descriptor;
    }
}
