package ch.softenvironment.jomm.demoapp.model;

/*
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

import ch.softenvironment.jomm.descriptor.DbDescriptor;
import ch.softenvironment.jomm.descriptor.DbMultiplicityRange;
import ch.softenvironment.jomm.descriptor.DbNumericFieldDescriptor;
import ch.softenvironment.jomm.mvc.model.DbRelationshipBean;

/**
 * @author generated by the umleditor
 */
public class Role extends DbRelationshipBean {

    protected Role(ch.softenvironment.jomm.DbObjectServer objectServer) {
        super(objectServer);
    }

    private java.lang.Double fieldPercentage;

    public java.lang.Double getPercentage() {
        refresh(false); // read lazy initialized objects
        return fieldPercentage;
    }

    public void setPercentage(java.lang.Double percentage) {
        java.lang.Double oldValue = fieldPercentage;
        fieldPercentage = percentage;
        firePropertyChange("percentage", oldValue, fieldPercentage);
    }

    private ch.softenvironment.jomm.demoapp.model.RoleType fieldType;

    public ch.softenvironment.jomm.demoapp.model.RoleType getType() {
        refresh(false); // read lazy initialized objects
        return fieldType;
    }

    public void setType(ch.softenvironment.jomm.demoapp.model.RoleType type) {
        ch.softenvironment.jomm.demoapp.model.RoleType oldValue = fieldType;
        fieldType = type;
        firePropertyChange("type", oldValue, fieldType);
    }

    private java.util.List<Activity> fieldActivity = new java.util.ArrayList<>();

    public java.util.List<Activity> getActivity() {
        refresh(false); // read lazy initialized objects
        return fieldActivity;
    }

    public void setActivity(java.util.List<Activity> activity) {
        java.util.List<Activity> oldValue = fieldActivity;
        fieldActivity = activity;
        firePropertyChange("activity", oldValue, fieldActivity);
    }

    private java.util.List<WorkProduct> fieldWorkProduct = new java.util.ArrayList<>();

    public java.util.List<WorkProduct> getWorkProduct() {
        refresh(false); // read lazy initialized objects
        return fieldWorkProduct;
    }

    public void setWorkProduct(java.util.List<WorkProduct> workProduct) {
        java.util.List<WorkProduct> oldValue = fieldWorkProduct;
        fieldWorkProduct = workProduct;
        firePropertyChange("workProduct", oldValue, fieldWorkProduct);
    }

    private java.lang.Long fieldProjectId;

    public java.lang.Long getProjectId() {
        refresh(false); // read lazy initialized objects
        return fieldProjectId;
    }

    public void setProjectId(java.lang.Long project) {
        java.lang.Long oldValue = fieldProjectId;
        fieldProjectId = project;
        firePropertyChange("projectId", oldValue, fieldProjectId);
    }

    private java.lang.Long fieldMemberId;

    public java.lang.Long getMemberId() {
        refresh(false); // read lazy initialized objects
        return fieldMemberId;
    }

    public void setMemberId(java.lang.Long member) {
        java.lang.Long oldValue = fieldMemberId;
        fieldMemberId = member;
        firePropertyChange("memberId", oldValue, fieldMemberId);
    }

    public static DbDescriptor createDescriptor() {
        DbDescriptor descriptor = new DbDescriptor(Role.class);
        descriptor.add("percentage", "Percentage",
            new DbNumericFieldDescriptor(java.lang.Double.class, 0.0,
                100.0, 3), new DbMultiplicityRange(0, 1));
        descriptor.addCode("type", "T_Id_Type", new DbMultiplicityRange(0, 1));
        descriptor.addOneToMany(DbDescriptor.ASSOCIATION, "activity", "roleId",
            new DbMultiplicityRange(0, DbMultiplicityRange.UNBOUND),
            Activity.class, false);
        descriptor.addOneToMany(DbDescriptor.ASSOCIATION, "workProduct",
            "responsibleId", new DbMultiplicityRange(0,
                DbMultiplicityRange.UNBOUND), WorkProduct.class, false);
        descriptor
            .addAssociationEnd(Project.class, "projectId", "T_Id_project");
        descriptor.addAssociationEnd(NaturalPerson.class, "memberId",
            "T_Id_member");
        return descriptor;
    }
}
