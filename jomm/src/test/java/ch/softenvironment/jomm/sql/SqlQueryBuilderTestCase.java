package ch.softenvironment.jomm.sql;

/*
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

import ch.softenvironment.jomm.DbDomainNameServer;
import ch.softenvironment.jomm.DbMapper;
import ch.softenvironment.jomm.DbObjectServer;
import ch.softenvironment.jomm.DbQueryBuilder;
import ch.softenvironment.jomm.descriptor.DbDateFieldDescriptor;
import ch.softenvironment.jomm.target.sql.hsqldb.HSQLDBObjectServerFactory;
import ch.softenvironment.jomm.target.sql.msaccess.MsAccessObjectServerFactory;
import java.util.Date;

/**
 * Test SqlQueryBuilder.
 *
 * @author Peter Hirzel
 */
public class SqlQueryBuilderTestCase extends junit.framework.TestCase {

	private DbObjectServer server = null;

	public SqlQueryBuilderTestCase() {
		super();
	}

	/**
	 * StringUtilsTestCase constructor comment.
	 *
	 * @param name java.lang.String
	 */
	public SqlQueryBuilderTestCase(String name) {
		super(name);
	}

	@Override
	protected void setUp() throws java.lang.Exception {
		server = DbDomainNameServer.getDefaultServer();
	}

	public static void insertTechnicalFields(DbQueryBuilder builder) {
		if ((builder.getObjectServer().getPersistenceManagerFactory() instanceof MsAccessObjectServerFactory)
			|| (builder.getObjectServer().getPersistenceManagerFactory() instanceof HSQLDBObjectServerFactory)) {
			// not generated by DBMS-Server
			builder.append(DbMapper.ATTRIBUTE_CREATE_DATE, new Date(),
				DbDateFieldDescriptor.DATETIME);
			builder.append(DbMapper.ATTRIBUTE_LAST_CHANGE, new Date(),
				DbDateFieldDescriptor.DATETIME);
			builder.append(DbMapper.ATTRIBUTE_USER_ID, builder
				.getObjectServer().getUserId());
		}
	}

	/**
	 * If this testsuite fails for MS Access, copy DemoApp_CLEAN.mdb to DemoApp.mdb.
	 */
	public void testInsertSelect() {
		Long nlsId = Long.valueOf(1000);
		DbQueryBuilder builder = server.createQueryBuilder(
			DbQueryBuilder.INSERT, "Dummy into T_NLS");
		builder.setTableList(server.getMapper().getTargetNlsName());
		builder.append(server.getMapper().getTargetIdName(), nlsId);
		builder.append("Symbol", "Dummy");
		insertTechnicalFields(builder);
		server.execute(builder);

		builder = server
			.createQueryBuilder(DbQueryBuilder.SELECT, "Select NLS");
		builder.setTableList(server.getMapper().getTargetNlsName());
		builder.setAttributeList("COUNT(*)");
		builder.addFilter(server.getMapper().getTargetIdName(), nlsId);
		assertTrue("1 record in T_NLS",
			(long) 1 == ((Number) server.getFirstValue(builder))
				.longValue());
	}
}
