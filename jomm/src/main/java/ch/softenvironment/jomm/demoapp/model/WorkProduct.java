package ch.softenvironment.jomm.demoapp.model;

/*
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

import ch.softenvironment.jomm.DbMapper;
import ch.softenvironment.jomm.datatypes.DbNlsString;
import ch.softenvironment.jomm.descriptor.DbDescriptor;
import ch.softenvironment.jomm.descriptor.DbMultiplicityRange;
import ch.softenvironment.jomm.descriptor.DbTextFieldDescriptor;
import ch.softenvironment.jomm.mvc.model.DbEntityBean;

/**
 * @author generated by the umleditor
 */
public class WorkProduct extends DbEntityBean {

    protected WorkProduct(ch.softenvironment.jomm.DbObjectServer objectServer) {
        super(objectServer);
    }

    private String fieldDescription;

    public String getDescription() {
        refresh(false); // read lazy initialized objects
        return fieldDescription;
    }

    public void setDescription(String desc) {
        String oldValue = fieldDescription;
        fieldDescription = desc;
        firePropertyChange("description", oldValue, fieldDescription);
    }

    private java.util.List<Activity> fieldActivity = new java.util.ArrayList<>();

    public java.util.List<Activity> getActivity() {
        refresh(false); // read lazy initialized objects
        return fieldActivity;
    }

    public void setActivity(java.util.List<Activity> activity) {
        java.util.List<Activity> oldValue = fieldActivity;
        fieldActivity = activity;
        firePropertyChange("activity", oldValue, fieldActivity);
    }

    private DbNlsString fieldName;

    public DbNlsString getName() {
        refresh(false); // read lazy initialized objects
        return fieldName;
    }

    public void setName(DbNlsString name) {
        DbNlsString oldValue = fieldName;
        fieldName = name;
        firePropertyChange("name", oldValue, fieldName);
    }

    private DbNlsString fieldOptionalName;

    public DbNlsString getOptionalName() {
        refresh(false); // read lazy initialized objects
        return fieldOptionalName;
    }

    public void setOptionalName(DbNlsString name) {
        DbNlsString oldValue = fieldOptionalName;
        fieldOptionalName = name;
        firePropertyChange("optionalName", oldValue, fieldOptionalName);
    }

    private java.lang.Long fieldResponsibleId;

    public java.lang.Long getResponsibleId() {
        refresh(false); // read lazy initialized objects
        return fieldResponsibleId;
    }

    public void setResponsibleId(java.lang.Long responsible) {
        java.lang.Long oldValue = fieldResponsibleId;
        fieldResponsibleId = responsible;
        firePropertyChange("responsibleId", oldValue, fieldResponsibleId);
    }

    public static DbDescriptor createDescriptor() {
        DbDescriptor descriptor = new DbDescriptor(WorkProduct.class);
        descriptor.add("description", "description", new DbTextFieldDescriptor(
            20), new DbMultiplicityRange(0, 1));
        descriptor.addOneToMany(DbDescriptor.ASSOCIATION, "activity",
            "workProductId", new DbMultiplicityRange(0,
                DbMultiplicityRange.UNBOUND), Activity.class, false);
        descriptor.addNlsString(PROPERTY_NAME, DbMapper.ATTRIBUTE_NAME_ID,
            new DbMultiplicityRange(1, 1));
        descriptor.addNlsString("optionalName", "T_Id_optionalName",
            new DbMultiplicityRange(0, 1));
        // TODO descriptor.addNlsString("multiName", "T_Id_multiName", new
        // DbMultiplicityRange(0, DbMultiplicityRange.UNBOUND));
        descriptor.addManyToOneReferenceId(DbDescriptor.ASSOCIATION,
            "responsibleId", "T_Id_responsible", new DbMultiplicityRange(1,
                1));
        return descriptor;
    }
}
